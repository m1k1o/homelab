version: "3.7"

networks:
  default:
    attachable: true
    ipam:
     config:
       - subnet: "${SUBNET_AND_MASK}"

services:
  dockerhost:
    image: "qoomon/docker-host"
    restart: "unless-stopped"
    cap_add: [ "NET_ADMIN", "NET_RAW" ]

  nodeexporter:
    image: "prom/node-exporter:${NODEEXPORTER_VERSION}"
    restart: "unless-stopped"
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)"
      - "--collector.cpu"
      - "--collector.netdev"
      - "--collector.hwmon"
      - "--collector.meminfo"
      - "--collector.zfs"
    volumes:
      - "/proc:/host/proc:ro"
      - "/sys:/host/sys:ro"
      - "/:/rootfs:ro"

  cadvisor:
    image: "google/cadvisor:${CADVISOR_VERSION}"
    volumes:
      - "/:/rootfs:ro"
      - "/var/run:/var/run:rw"
      - "/sys:/sys:ro"
      - "/var/lib/docker/:/var/lib/docker:ro"
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.cadvisor.loadbalancer.server.port=8080"
      - "traefik.http.routers.cadvisor.rule=Host(`cadvisor.${DOMAIN_NAME}`)"
      - "traefik.http.routers.cadvisor.entrypoints=web-secure"
      - "traefik.http.routers.cadvisor.tls.certresolver=letsencrypt"
      - "traefik.http.routers.cadvisor.middlewares=basicauth@file"

  alertmanager:
    image: "prom/alertmanager:${ALERTMANAGER_VERSION}"
    restart: "unless-stopped"
    command:
      - "--config.file=/etc/alertmanager/alertmanager.yml"
      - "--storage.path=/alertmanager"
    volumes:
      - "./data/alertmanager/data:/alertmanager/"
      - "./data/alertmanager/config/alertmanager.yml:/etc/alertmanager/alertmanager.yml"
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.alertmanager.loadbalancer.server.port=9093"
      - "traefik.http.routers.alertmanager.rule=Host(`alertmanager.${DOMAIN_NAME}`)"
      - "traefik.http.routers.alertmanager.entrypoints=web-secure"
      - "traefik.http.routers.alertmanager.tls.certresolver=letsencrypt"
      - "traefik.http.routers.alertmanager.middlewares=basicauth@file"

  prometheus:
    image: "prom/prometheus:${PROMETHEUS_VERSION}"
    restart: "unless-stopped"
    user: "1000"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
    volumes:
      - "./data/prometheus/config/prometheus.yml:/etc/prometheus/prometheus.yml"
      - "./data/prometheus/config/alerts.yml:/etc/prometheus/alerts.yml"
      - "./data/prometheus/data:/prometheus"
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN_NAME}`)"
      - "traefik.http.routers.prometheus.entrypoints=web-secure"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"
      - "traefik.http.routers.prometheus.middlewares=basicauth@file"

  traefik:
    image: "traefik:${TRAEFIK_VERSION}"
    restart: "unless-stopped"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./data/traefik/traefik.yml:/etc/traefik/traefik.yml:ro"
      - "./data/traefik/usersfile:/usersfile:ro"
      - "./data/traefik/config:/config:ro"
      - "./data/traefik/acme.json:/acme.json"
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN_NAME}`)"
      - "traefik.http.routers.traefik.entrypoints=web-secure"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik.middlewares=basicauth@file"

  static:
    image: "nginx:${NGINX_VERSION}"
    restart: "unless-stopped"
    volumes:
      - "./data/static:/usr/share/nginx/html:ro"
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.static.loadbalancer.server.port=80"
      - "traefik.http.routers.static.rule=Host(`static.${DOMAIN_NAME}`)"
      - "traefik.http.routers.static.entrypoints=web-secure"
      - "traefik.http.routers.static.tls.certresolver=letsencrypt"

  openldap:
    image: "osixia/openldap:${OPENLDAP_VERSION}"
    restart: "unless-stopped"
    environment:
      LDAP_ORGANISATION: "Homelab"
      LDAP_DOMAIN: "${DOMAIN_NAME}"
      LDAP_ADMIN_PASSWORD: "${ADMIN_PASSWORD}"
      LDAP_REMOVE_CONFIG_AFTER_SETUP: "false"
    volumes:
      - "./data/ldap/data:/var/lib/ldap"
      - "./data/ldap/config:/etc/ldap/slapd.d"
      - "./data/ldap/ldif:/container/service/slapd/assets/config/bootstrap/ldif/custom"

  phpldapadmin:
    image: "osixia/phpldapadmin:${PHPLDAPADMIN_VERSION}"
    restart: "unless-stopped"
    environment:
      PHPLDAPADMIN_LDAP_HOSTS: "openldap"
      PHPLDAPADMIN_HTTPS: "false"
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.ldap.loadbalancer.server.port=80"
      - "traefik.http.routers.ldap.rule=Host(`ldap.${DOMAIN_NAME}`)"
      - "traefik.http.routers.ldap.entrypoints=web-secure"
      - "traefik.http.routers.ldap.tls.certresolver=letsencrypt"

  postgres:
    image: "postgres:${POSTGRES_VERSION}"
    restart: "unless-stopped"
    environment:
      POSTGRES_PASSWORD: "${ADMIN_PASSWORD}"
    volumes:
      - "./data/postgres/data:/var/lib/postgresql/data"
      - "./data/postgres/init:/docker-entrypoint-initdb.d"

  mongo:
    image: "mongo:${MONGO_VERSION}"
    restart: "unless-stopped"
    command: "mongod --oplogSize 128 --replSet rs0"
    volumes:
      - "./data/mongo/data:/data/db"

  mongo-init-replica:
    image: "mongo:${MONGO_VERSION}"
    command: >
      bash -c
        "for i in `seq 1 30`; do
          mongo mongo/rocketchat --eval \"
            rs.initiate({
              _id: 'rs0',
              members: [ { _id: 0, host: 'localhost:27017' } ]})\" &&
          s=$$? && break || s=$$?;
          echo \"Tried $$i times. Waiting 5 secs...\";
          sleep 5;
        done; (exit $$s)"

  adminer:
    image: "adminer:${ADMINER_VERSION}"
    restart: "unless-stopped"
    environment:
      ADMINER_DESIGN: "nette"
      ADMINER_DEFAULT_SERVER: "postgres"
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.adminer.loadbalancer.server.port=8080"
      - "traefik.http.routers.adminer.rule=Host(`adminer.${DOMAIN_NAME}`)"
      - "traefik.http.routers.adminer.entrypoints=web-secure"
      - "traefik.http.routers.adminer.tls.certresolver=letsencrypt"
      - "traefik.http.routers.adminer.middlewares=basicauth@file"

  redis:
    image: "redis:${REDIS_VERSION}"
    restart: "unless-stopped"

  portainer:
    image: "portainer/portainer:${PORTAINER_VERSION}"
    command: "-H unix:///var/run/docker.sock"
    restart: "unless-stopped"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./data/portainer/data:/data"
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
      - "traefik.http.routers.portainer.rule=Host(`portainer.${DOMAIN_NAME}`)"
      - "traefik.http.routers.portainer.entrypoints=web-secure"
      - "traefik.http.routers.portainer.tls.certresolver=letsencrypt"

  nextcloud:
    image: "nextcloud:${NEXTCLOUD_VERSION}"
    restart: "unless-stopped"
    hostname: "nextcloud.${DOMAIN_NAME}"
    volumes:
      - "./data/nextcloud/html:/var/www/html"
      - "./data/nextcloud/apps:/var/www/html/custom_apps"
      - "./data/nextcloud/config:/var/www/html/config"
      - "${NEXTCLOUD_DATA}:/var/www/html/data"
      - "./data/nextcloud/theme:/var/www/html/themes/custom"
    environment:
      POSTGRES_DB: "nextcloud"
      POSTGRES_USER: "nextcloud"
      POSTGRES_PASSWORD: "${ADMIN_PASSWORD}"
      POSTGRES_HOST: "postgres"
      NEXTCLOUD_ADMIN_USER: "${ADMIN_USERNAME}"
      NEXTCLOUD_ADMIN_PASSWORD: "${ADMIN_PASSWORD}"
      REDIS_HOST: "redis"
      REDIS_HOST_PORT: "6379"
      NEXTCLOUD_HOSTNAME: "nextcloud.${DOMAIN_NAME}"
      NEXTCLOUD_TRUSTED_DOMAINS: "nextcloud.${DOMAIN_NAME}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.nextcloud.loadbalancer.server.port=80"
      - "traefik.http.routers.nextcloud.rule=Host(`nextcloud.${DOMAIN_NAME}`)"
      - "traefik.http.routers.nextcloud.entrypoints=web-secure"
      - "traefik.http.routers.nextcloud.tls.certresolver=letsencrypt"

  gitea:
    image: "gitea/gitea:${GITEA_VERSION}"
    restart: "unless-stopped"
    ports:
      - "2222:22"
    environment:
      APP_NAME: "Gitea Homelab"
      RUN_USER: "root"
      DISABLE_SSH: "false"
      START_SSH_SERVER: "true"
      SSH_PORT: "2222"
      SSH_LISTEN_PORT: "22"
      SSH_DOMAIN: "gitea.${DOMAIN_NAME}"
      USER_UID: "0"
      USER_GID: "0"
      DB_TYPE: postgres
      DB_HOST: postgres:5432
      DB_NAME: gitea
      DB_USER: gitea
      DB_PASSWD: "${ADMIN_PASSWORD}"
      RUN_MODE: "prod"
      REQUIRE_SIGNIN_VIEW: "true"
      DISABLE_REGISTRATION: "false"
      INSTALL_LOCK: "false"
    volumes:
      - "${GITEA_DATA}:/data"
      - "/etc/timezone:/etc/timezone:ro"
      - "/etc/localtime:/etc/localtime:ro"
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.gitea.loadbalancer.server.port=3000"
      - "traefik.http.routers.gitea.rule=Host(`gitea.${DOMAIN_NAME}`)"
      - "traefik.http.routers.gitea.entrypoints=web-secure"
      - "traefik.http.routers.gitea.tls.certresolver=letsencrypt"

  haste:
    image: "ogarcia/haste-server:${HASTE_VERSION}"
    restart: "unless-stopped"
    volumes:
      - "./data/haste:/srv/haste/data"
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.haste.loadbalancer.server.port=7777"
      - "traefik.http.routers.haste.rule=Host(`haste.${DOMAIN_NAME}`)"
      - "traefik.http.routers.haste.entrypoints=web-secure"
      - "traefik.http.routers.haste.tls.certresolver=letsencrypt"

  grafana:
    image: "grafana/grafana:${GRAFANA_VERSION}"
    restart: "unless-stopped"
    user: "1000"
    environment:
      GF_SECURITY_ADMIN_USER: "${ADMIN_USERNAME}"
      GF_SECURITY_ADMIN_PASSWORD: "${ADMIN_PASSWORD}"
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - "./data/grafana/data:/var/lib/grafana"
      - "./data/grafana/provisioning:/etc/grafana/provisioning"
      - "./data/grafana/config/grafana.ini:/etc/grafana/grafana.ini"
      - "./data/grafana/config/ldap.toml:/etc/grafana/ldap.toml"
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN_NAME}`)"
      - "traefik.http.routers.grafana.entrypoints=web-secure"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"

  jellyfin:
    image: "linuxserver/jellyfin:${JELLYFIN_VERSION}"
    restart: "unless-stopped"
    environment:
      PUID: "0"
      PGID: "0"
      UMASK_SET: "022"
    volumes:
      - "./data/jellyfin/config:/config"
      - "./data/jellyfin/cache:/cache"
      - "./data/jellyfin/transcode:/transcode"
      - "${JELLYFIN_MEDIA}:/media"
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.jellyfin.loadbalancer.server.port=8096"
      - "traefik.http.routers.jellyfin.rule=Host(`jellyfin.${DOMAIN_NAME}`)"
      - "traefik.http.routers.jellyfin.entrypoints=web-secure"
      - "traefik.http.routers.jellyfin.tls.certresolver=letsencrypt"
  
  cloudflared:
    image: "visibilityspots/cloudflared"
    restart: "unless-stopped"
    ports:
      - 54:54/udp
    networks:
      default:
        ipv4_address: "172.18.255.1"

  pihole:
    image: "pihole/pihole:${PIHOLE_VERSION}"
    restart: "unless-stopped"
    ports:
      - "53:53/tcp"
      - "53:53/udp"
    environment:
      VIRTUAL_HOST: "pihole.${DOMAIN_NAME}"
    volumes:
      - "./data/pihole/data:/etc/pihole"
      - "./data/pihole/dnsmasq:/etc/dnsmasq.d"
    dns:
      - "127.0.0.1"
      - "1.1.1.1"
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.pihole.loadbalancer.server.port=80"
      - "traefik.http.routers.pihole.rule=Host(`pihole.${DOMAIN_NAME}`)"
      - "traefik.http.routers.pihole.entrypoints=web-secure"
      - "traefik.http.routers.pihole.tls.certresolver=letsencrypt"

  filebrowser:
    image: "filebrowser/filebrowser:${FILEBROWSER_VERSION}"
    restart: "unless-stopped"
    user: "1000:117"
    volumes:
      - "${FILEBROWSER_MEDIA}:/files"
      - "./data/filebrowser/data:/database"
      - "./data/filebrowser/config/filebrowser.json:/.filebrowser.json"
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.filebrowser.loadbalancer.server.port=8080"
      - "traefik.http.routers.filebrowser.rule=Host(`files.${DOMAIN_NAME}`)"
      - "traefik.http.routers.filebrowser.entrypoints=web-secure"
      - "traefik.http.routers.filebrowser.tls.certresolver=letsencrypt"
  
  openproject:
    image: "openproject/community:${OPENPROJECT_VERSION}"
    restart: "unless-stopped"
    environment:
      SECRET_KEY_BASE: "${SECRET_KEY_BASE}"
      DATABASE_URL: "postgresql://openproject:${ADMIN_PASSWORD}@postgres:5432/openproject"
    volumes:
      - "./data/openproject/assets:/var/openproject/assets"
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.openproject.loadbalancer.server.port=80"
      - "traefik.http.routers.openproject.rule=Host(`openproject.${DOMAIN_NAME}`)"
      - "traefik.http.routers.openproject.entrypoints=web-secure"
      - "traefik.http.routers.openproject.tls.certresolver=letsencrypt"

  rocket:
    image: "rocketchat/rocket.chat:${ROCKETCHAT_VERSION}"
    command: >
      bash -c
        "for i in `seq 1 30`; do
          node main.js &&
          s=$$? && break || s=$$?;
          echo \"Tried $$i times. Waiting 5 secs...\";
          sleep 5;
        done; (exit $$s)"
    restart: "unless-stopped"
    volumes:
      - "./data/rocket/uploads:/app/uploads"
    environment:
      PORT: "3000"
      ROOT_URL: "https://rocket.${DOMAIN_NAME}"
      MONGO_URL: "mongodb://mongo/rocket"
      MONGO_OPLOG_URL: "mongodb://mongo/local"
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.rocket.loadbalancer.server.port=3000"
      - "traefik.http.routers.rocket.rule=Host(`rocket.${DOMAIN_NAME}`)"
      - "traefik.http.routers.rocket.entrypoints=web-secure"
      - "traefik.http.routers.rocket.tls.certresolver=letsencrypt"

  onlyoffice:
    image: "onlyoffice/documentserver:${ONLYOFFICE_VERSION}"
    restart: "unless-stopped"
    stdin_open: true
    tty: true
    restart: always
    environment:
      JWT_ENABLED: "true"
      JWT_SECRET: "password"
    volumes:
      - "./data/onlyoffice/data:/var/www/onlyoffice/Data"
      - "./data/onlyoffice/log:/var/log/onlyoffice"
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.office.loadbalancer.server.port=80"
      - "traefik.http.routers.office.rule=Host(`office.${DOMAIN_NAME}`)"
      - "traefik.http.routers.office.entrypoints=web-secure"
      - "traefik.http.routers.office.tls.certresolver=letsencrypt"
      - "traefik.http.routers.office.middlewares=office-sslheaders"
      - "traefik.http.middlewares.office-sslheaders.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.office-sslheaders.headers.accessControlAllowOrigin=*"
